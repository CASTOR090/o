package br.itb.projeto.pizzaria3e.rest.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.itb.projeto.pizzaria3e.model.entity.Usuario;
import br.itb.projeto.pizzaria3e.rest.exception.ResourceNotFoundException;
import br.itb.projeto.pizzaria3e.service.UsuarioService;


@RestController
@RequestMapping("/usuario")
public class UsuarioController {

	private UsuarioService usuarioService;
	//Source -> Generate Constructor using Fields...
	
	public UsuarioController(UsuarioService usuarioService) {
		super();
		this.usuarioService = usuarioService;
	}
	
	@GetMapping("/test")
	public String getTest() {
		return "Olá, Usuario!";
	}
	
	@GetMapping("/findById/{id}")
	public ResponseEntity<Usuario> findById(@PathVariable long id){
		
		Usuario usuario = usuarioService.findById(id);
		
		if(usuario != null) {
			return new ResponseEntity<Usuario>(usuario, HttpStatus.OK);
		} else {
			throw new ResourceNotFoundException("Usuário não encontrado!");
		}
	}
	
	@GetMapping("/findAll")
	public ResponseEntity<List<Usuario>> findAll(){
		
		List<Usuario> usuarios = usuarioService.findAll();
		
		return new ResponseEntity<List<Usuario>>(usuarios, HttpStatus.OK);
		
	}
	
	
	@PostMapping("/create")
	public ResponseEntity<?> save(@RequestBody Usuario usuario) {
		
		System.out.println(usuario.toString());
		Usuario _usuario = usuarioService.save(usuario);
		
		if(_usuario != null) {
			return ResponseEntity.ok().body("Usuário cadastrado com sucesso!");
		}
		
		throw new ResourceNotFoundException("Usuário já cadastrado!");
	}
	
	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody Usuario usuario) {
		
		Usuario _usuario = usuarioService.login(usuario.getEmail(), usuario.getSenha());
		
		if(_usuario != null) {
			return ResponseEntity.ok().body(_usuario);
		}
		
		throw new ResourceNotFoundException("Dados Incorretos!");
	}
	
	@PutMapping("/alterarSenha/{id}")
	public ResponseEntity<?> alterarSenha(@PathVariable long id, @RequestBody Usuario usuario) {
		
		Usuario _usuario = usuarioService.alterarSenha(id, usuario);
		
		if(_usuario != null) {
			return ResponseEntity.ok().body("Senha alterada com sucesso!");
		}
		
		throw new ResourceNotFoundException("Erro ao alterar a senha!");
	}
	
	@PutMapping("/inativar/{id}")
	public ResponseEntity<?> inativar(@PathVariable long id) {
		
		Usuario _usuario = usuarioService.inativar(id);
		
		if(_usuario != null) {
			return ResponseEntity.ok().body("Conta de usuário inativada com sucesso!");
		}
		
		throw new ResourceNotFoundException("Erro ao inativar a conta de usuário!");
	}
	
	@PutMapping("/reativar/{id}")
	public ResponseEntity<?> reativar(@PathVariable long id) {
		
		Usuario _usuario = usuarioService.reativar(id);
		
		if(_usuario != null) {
			return ResponseEntity.ok().body("Conta de usuário ativada com sucesso!");
		}
		
		throw new ResourceNotFoundException("Erro ao ativar a conta de usuário!");
	}
	
}




